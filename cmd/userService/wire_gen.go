// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/TiktokCommence/userService/internal/biz"
	"github.com/TiktokCommence/userService/internal/conf"
	"github.com/TiktokCommence/userService/internal/data"
	"github.com/TiktokCommence/userService/internal/registry"
	"github.com/TiktokCommence/userService/internal/server"
	"github.com/TiktokCommence/userService/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, emailConf *conf.EmailConf, registryConf *conf.RegistryConf, logger log.Logger) (*kratos.App, func(), error) {
	cache := data.NewCache(confData)
	options := data.NewOptions(confData)
	redisWorkerImplement := data.NewRedisWorkerImplement(cache, options, logger)
	db, err := data.NewDB(confData)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(db, logger)
	emailWorker := data.NewEmailWorker(cache, emailConf)
	userHandler := biz.NewUserHandler(redisWorkerImplement, redisWorkerImplement, userRepo, emailWorker, logger)
	userServiceService := service.NewUserServiceService(userHandler)
	grpcServer := server.NewGRPCServer(confServer, userServiceService, logger)
	etcdRegistry := registry.NewRegistrarServer(registryConf, logger)
	app := newApp(logger, grpcServer, etcdRegistry)
	return app, func() {
	}, nil
}
